# Makefile –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# –£–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å Docker –∫–æ–º–∞–Ω–¥–∞–º–∏

.PHONY: help build up down logs clean restart test backup restore

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = psycho-tests

# –ü–æ–º–æ—â—å
help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  build     - –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  up        - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  down      - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  logs      - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  clean     - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, volumes)"
	@echo "  test      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  backup    - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
	@echo "  restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞"

# –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build:
	@echo "üî® –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) build

# –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞
build-no-cache:
	@echo "üî® –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –±–µ–∑ –∫–µ—à–∞..."
	docker-compose -f $(COMPOSE_FILE) build --no-cache

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
up:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!"
	@echo "Frontend: http://localhost:3000"
	@echo "Backend API: http://localhost:8000"
	@echo "API Docs: http://localhost:8000/docs"

# –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
up-build:
	@echo "üî® –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
	docker-compose -f $(COMPOSE_FILE) up -d --build

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
down:
	@echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) down

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º volumes
down-volumes:
	@echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º volumes..."
	docker-compose -f $(COMPOSE_FILE) down -v

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart:
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	$(MAKE) down
	$(MAKE) up

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs:
	docker-compose -f $(COMPOSE_FILE) logs -f

# –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
logs-backend:
	docker-compose -f $(COMPOSE_FILE) logs -f backend

logs-frontend:
	docker-compose -f $(COMPOSE_FILE) logs -f frontend

logs-postgres:
	docker-compose -f $(COMPOSE_FILE) logs -f postgres

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
shell-backend:
	docker-compose -f $(COMPOSE_FILE) exec backend bash

shell-frontend:
	docker-compose -f $(COMPOSE_FILE) exec frontend sh

shell-postgres:
	docker-compose -f $(COMPOSE_FILE) exec postgres psql -U psycho_user -d psycho_tests

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
migrate:
	docker-compose -f $(COMPOSE_FILE) exec backend alembic upgrade head

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –º–∏–≥—Ä–∞—Ü–∏—è–º)
create-tables:
	docker-compose -f $(COMPOSE_FILE) exec backend python create_tables.py

# –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–¥–ª—è Railway)
init-database:
	docker-compose -f $(COMPOSE_FILE) exec backend python init_database.py

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
makemigration:
	docker-compose -f $(COMPOSE_FILE) exec backend alembic revision --autogenerate -m "$(msg)"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) exec backend python -m pytest

test-frontend:
	docker-compose -f $(COMPOSE_FILE) exec frontend npm test

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
lint:
	docker-compose -f $(COMPOSE_FILE) exec backend python -m flake8 .
	docker-compose -f $(COMPOSE_FILE) exec frontend npm run lint

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	docker-compose -f $(COMPOSE_FILE) exec backend python -m black .
	docker-compose -f $(COMPOSE_FILE) exec frontend npm run format

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç—É—Å
status:
	@echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
	docker-compose -f $(COMPOSE_FILE) ps

health:
	@echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@echo "Backend:"
	@curl -f http://localhost:8000/health || echo "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "Frontend:"
	@curl -f http://localhost:3000/nginx-health || echo "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup:
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec postgres pg_dump -U psycho_user psycho_tests > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore:
	@echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ $(backup)..."
	@if [ -z "$(backup)" ]; then echo "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: make restore backup=backups/backup_file.sql"; exit 1; fi
	docker-compose -f $(COMPOSE_FILE) exec -T postgres psql -U psycho_user psycho_tests < $(backup)
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
	docker-compose -f $(COMPOSE_FILE) down -v --rmi all --remove-orphans
	docker system prune -f
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤
clean-images:
	@echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
	docker image prune -f

# –û—á–∏—Å—Ç–∫–∞ volumes
clean-volumes:
	@echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes..."
	docker volume prune -f

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
info:
	@echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
	@echo "Project: $(PROJECT_NAME)"
	@echo "Compose file: $(COMPOSE_FILE)"
	@echo "Services: backend, frontend, postgres"
	@echo "Ports:"
	@echo "  - Frontend: 3000"
	@echo "  - Backend: 8000"
	@echo "  - PostgreSQL: 5432" 