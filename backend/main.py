"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç:
- CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
- –†–æ—É—Ç–µ—Ä—ã –¥–ª—è API
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
"""

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import os
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from routers import auth, tests, users
from utils.exceptions import create_exception_handlers

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
cors_origins = os.getenv("CORS_ORIGINS", 
    '["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:5173", "http://127.0.0.1:5173", "https://university-tests-pearl.vercel.app"]'
)

# –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É JSON —Å origins
import json
try:
    origins_list = json.loads(cors_origins)
except json.JSONDecodeError:
    # Fallback –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    origins_list = [
        "http://localhost:3000", 
        "http://127.0.0.1:3000",
        "http://localhost:5173",  # Vite dev server
        "http://127.0.0.1:5173",
        "http://localhost:3001",  # React dev server –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
        "http://127.0.0.1:3001",
        "http://localhost:8080",  # Webpack dev server
        "http://127.0.0.1:8080",
        "http://localhost:8000",  # –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±—ç–∫–µ–Ω–¥—É –Ω–∞ —Ç–æ–º –∂–µ —Ö–æ—Å—Ç–µ
        "http://127.0.0.1:8000",
        # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        "http://frontend:3000",
        "http://backend:8000"
        # Vercel –¥–æ–º–µ–Ω—ã –î–û–õ–ñ–ù–´ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã —Ç–æ—á–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π CORS_ORIGINS
        # "https://*.vercel.app" –ù–ï –†–ê–ë–û–¢–ê–ï–¢ —Å credentials=True!
    ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins_list,
    allow_credentials=True,  # –í–∞–∂–Ω–æ –¥–ª—è httpOnly cookies
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è –¥–µ–±–∞–≥–∞
print(f"üåê CORS origins configured: {origins_list}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
create_exception_handlers(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router)
app.include_router(tests.router)
app.include_router(users.router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "API —Å–∏—Å—Ç–µ–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "version": "2.0.0",
        "docs": "/docs",
        "redoc": "/redoc"
    }

@app.get("/health")
async def health_check():
    """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Docker –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "service": "psycho-tests-backend",
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "version": "2.0.0"
    }

# –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–∏—Å—Ç–µ–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: /docs")

# –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–∏—Å—Ç–µ–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    host = "0.0.0.0"
    port = 8000
    debug = os.getenv("DEBUG", "False").lower() == "true"
    
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=debug,
        log_level="info"
    ) 