#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
from sqlalchemy.orm import Session
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(__file__))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from db.database import SessionLocal, engine
from models.test import Test
from models.user import User

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç—ã
        existing_tests = db.query(Test).count()
        if existing_tests > 0:
            print(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_tests} —Ç–µ—Å—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        test_data = [
            {
                "title": "–¢–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
                "description": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏",
                "filename": "anxiety_test.json",
                "is_available": True
            },
            {
                "title": "–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é",
                "description": "–¢–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                "filename": "depression_test.json",
                "is_available": True
            },
            {
                "title": "–¢–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–µ—Å—Å",
                "description": "–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–∏–º",
                "filename": "stress_test.json",
                "is_available": True
            },
            {
                "title": "–¢–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏",
                "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏",
                "filename": "personality_test.json",
                "is_available": False  # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            }
        ]
        
        for test_info in test_data:
            test = Test(**test_info)
            db.add(test)
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
        tests = db.query(Test).all()
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for test in tests:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if test.is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            print(f"  {test.id}. {test.title} - {status}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

def show_database_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    
    try:
        users_count = db.query(User).count()
        tests_count = db.query(Test).count()
        available_tests_count = db.query(Test).filter(Test.is_available == True).count()
        
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"  üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {tests_count}")
        print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {available_tests_count}")
        
        if tests_count > 0:
            print("\nüìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤:")
            tests = db.query(Test).all()
            for test in tests:
                status = "‚úÖ" if test.is_available else "‚ùå"
                print(f"  {status} {test.id}. {test.title}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ: {e}")
    finally:
        db.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "info":
        show_database_info()
    else:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        create_test_data()
        show_database_info()

if __name__ == "__main__":
    main() 